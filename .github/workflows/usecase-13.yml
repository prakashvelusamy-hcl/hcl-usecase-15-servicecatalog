name: Terraform CI/CD with All Tests

on:
  pull_request:
    branches:
      - master
  push:
    branches:
      - master
  workflow_dispatch:

permissions:
  contents: write
  pull-requests: write
  id-token: write

env:
  AWS_REGION: ap-south-1
  ROLE_ARN: arn:aws:iam::495599733393:role/OIDC

jobs:

  lint-and-security:
    name: Lint and Security Checks
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup TFLint
        uses: terraform-linters/setup-tflint@v4
        with:
          tflint_version: v0.50.2

      - name: Run TFLint
        run: tflint --init && tflint -f compact
        continue-on-error: true

      - name: Run tfsec
        uses: aquasecurity/tfsec-action@v1.0.0
        continue-on-error: true

      - name: Install Conftest
        run: |
          wget https://github.com/open-policy-agent/conftest/releases/download/v0.52.0/conftest_0.52.0_Linux_x86_64.tar.gz
          tar xzf conftest_0.52.0_Linux_x86_64.tar.gz
          chmod +x conftest
          sudo mv conftest /usr/local/bin/

      - name: Generate Terraform JSON Plan for OPA/Checkov
        run: |
          terraform init -reconfigure
          terraform plan -out=tfplan.binary
          terraform show -json tfplan.binary > tfplan.json

      - name: Run OPA (Conftest) Policy Checks
        run: conftest test tfplan.json --policy policy/
        continue-on-error: true

      - name: Run Checkov with custom SG rule
        uses: bridgecrewio/checkov-action@v12
        with:
          directory: ./
          framework: terraform
          external_checks_dirs: ./custom_policies
        continue-on-error: true

      - name: Install terraform-compliance
        run: pip install terraform-compliance

      - name: Run terraform-custom-compliance Tests
        run: terraform-compliance -p tfplan.json -f custom_compliance/terraform_compliance
        continue-on-error: true

  test-and-validate:
    name: Validate and Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-security

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Validate
        run: terraform validate -no-color

      - name: Terraform Test
        run: terraform test
        continue-on-error: true

  terraform-plan:
    name: Terraform Plan
    runs-on: ubuntu-latest
    needs: test-and-validate
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Plan
        id: plan
        run: |
           terraform plan -no-color -out=tfplan.binary
           terraform show -no-color tfplan.binary > tfplan.txt


      # - name: Upload tfplan.json artifact
      #   uses: actions/upload-artifact@v4
      #   with:
      #     name: tfplan
      #     path: tfplan.json

      - name: Comment Plan on PR
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const fs = require('fs');
            const plan = fs.readFileSync('tfplan.txt', 'utf8');
            const body = `#### Terraform Plan ðŸ“–\n\n\`\`\`\n${plan.slice(0, 6500)}...\n\`\`\``;
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: body
            });
      

  terraform-apply:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: test-and-validate
    if: github.ref == 'refs/heads/master' && (github.event_name == 'push' || github.event_name == 'workflow_dispatch')

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ env.ROLE_ARN }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.12.0

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        if: github.event_name == 'push' && github.ref == 'refs/heads/master'
        run: terraform apply -auto-approve -input=false

  generate-docs:
    name: Generate Terraform Docs
    runs-on: ubuntu-latest
    needs: terraform-apply
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install terraform-docs
        run: |
          curl -sSLo ./terraform-docs.tar.gz https://terraform-docs.io/dl/v0.16.0/terraform-docs-v0.16.0-$(uname)-amd64.tar.gz
          tar -xzf terraform-docs.tar.gz
          chmod +x terraform-docs
          sudo mv terraform-docs /usr/local/bin/

      - name: Generate Terraform Docs and Commit
        run: |
          terraform-docs markdown . > README.md.new
          mv README.md.new README.md

          git config --local user.name "CI Bot"
          git config --local user.email "ci@example.com"
          
          git add README.md
          git commit -m "docs: update README.md" || echo "No changes to commit"
          git push || echo "No changes to push"
